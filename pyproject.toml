[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "aio-microservice"
description = "A library to create microservices."
readme = "README.md"
requires-python = ">=3.9,<=3.12"
license = {text = "MIT"}
authors = [
  {name = "betaboon", email = "betaboon@0x80.ninja"},
]
maintainers = [
  {name = "betaboon", email = "betaboon@0x80.ninja"},
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = []

[project.urls]
Homepage = "https://github.com/betaboon/aio-microservice"
Documentation = "https://betaboon.github.io/aio-microservice"
Changelog = "https://github.com/betaboon/aio-microservice/releases"
Repository = "https://github.com/betaboon/aio-microservice"
"Issue Tracker" = "https://github.com/betaboon/aio-microservice/issues"

[project.scripts]
aio-microservice = "aio_microservice.__main__:main"

[tool.pdm.version]
source = "scm"
write_to = "aio_microservice/__version__.py"
write_template = "__version__ = \"{}\""

[tool.pdm.dev-dependencies]
docs = [
    "furo>=2023.9.10",
    "myst-parser>=2.0.0",
    "sphinx-autoapi>=3.0.0",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-copybutton>=0.5.2",
    "sphinx>=7.2.6",
]
linting = [
    "gitlint>=0.19.1",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ruff>=0.1.14",
]
testing = [
    "pytest-asyncio>=0.23.3",
    "pytest-cov>=4.1.0",
    "pytest>=7.4.4",
]
releasing = [
    "python-semantic-release>=8.7.0",
]

[tool.mypy]
strict = true
python_version = "3.9"

[tool.ruff]
target-version = "py39"
line-length = 100
preview = true

[tool.ruff.lint]
fixable = ["ALL"]
select = [
  "A", # flake8-builtins
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "COM", # flake8-commas
  "D", # pydocstyle
  "DTZ", # flake8-datetimez
  "E", # pycodestyle errors
  "ERA", # eradicate
  "EXE", # flake8-executable
  "F", # pyflakes
  "FLY", # flynt
  "FURB", # refurb
  "I", # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "N", # pep8-naming
  "NPY", # numpy
  "PD", # pandas-vet
  "PERF", # perflint
  "PIE", # flake8-pie
  "PLC", # pylint - convention
  "PLE", # pylint - error
  "PLW", # pylint - warning
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RUF", # Ruff-specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W", # pycodestyle - warning
  "YTT", # flake8-2020
]
ignore = [
  "D100", # pydocstyle - undocumented-public-module
  "D104", # pydocstyle - undocumented-public-package
]

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = [
  "C901", # mccabe - complex-structure
  "D", # pydocstyle
]

[tool.pytest.ini_options]
addopts = "--strict-config --strict-markers --cov"
xfail_strict = true

[tool.coverage.run]
branch = true
parallel = true
source = ["aio_microservice"]

[tool.pdm.scripts.install-git-hooks]
help = "Install pre-commit hooks"
cmd = "pre-commit install --install-hooks"

[tool.pdm.scripts.lint]
help = "Run pre-commit"
cmd = "pre-commit run --all-files"

[tool.pdm.scripts.test]
help = "Run tests"
cmd = "pytest"

[tool.pdm.scripts.docs-build]
help = "Build docs"
cmd = "sphinx-build docs docs/_build"

[tool.pdm.scripts.docs-serve]
help = "Build and serve docs"
cmd = "sphinx-autobuild --watch aio-microservice docs docs/_build"

[tool.pdm.scripts._ci-lint-code]
cmd = [
  "pre-commit", "run",
  "--show-diff-on-failure",
  "--from-ref", "$FROM_REF",
  "--to-ref", "$TO_REF",
]

[tool.pdm.scripts._ci-lint-commits]
cmd = [
  "gitlint",
  "--contrib", "contrib-title-conventional-commits",
  "--ignore", "body-is-missing",
  "--commits", "$FROM_REF..$TO_REF",
]
