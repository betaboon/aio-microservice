[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "aio-microservice"
description = "A library to create microservices."
readme = "README.md"
requires-python = ">=3.9,<3.13"
license = {text = "MIT"}
authors = [
    {name = "betaboon", email = "betaboon@0x80.ninja"},
]
maintainers = [
    {name = "betaboon", email = "betaboon@0x80.ninja"},
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
    "annotated-types>=0.6.0",
    "click>=8.1.3",
    "eval-type-backport>=0.1.3; python_version < \"3.10\"",
    "litestar>=2.6.3",
    "loguru>=0.7.2",
    "pydantic>=2.6.3",
    "pyhumps>=3.8.0",
    "rich-click>=1.7.3",
    "rich>=13.7.1",
    "typed-settings>=24.1.0",
    "typing-extensions>=4.10.0",
    "uvicorn>=0.27.1",
]

[project.optional-dependencies]
amqp = [
    "faststream[rabbit]>=0.4.6",
    "pyyaml>=6.0.1",
]
all = [
    "aio-microservice[amqp]",
    "aio-microservice[graphql]",
    "aio-microservice[s3]",
    "aio-microservice[scheduler]",
]
s3 = [
    "boto3>=1.34.54",
]
scheduler = [
    "apscheduler>=3.10.4",
]
graphql = [
    "strawberry-graphql>=0.220.0",
    "websockets>=12.0",
]

[project.urls]
Homepage = "https://github.com/betaboon/aio-microservice"
Documentation = "https://betaboon.github.io/aio-microservice"
Changelog = "https://github.com/betaboon/aio-microservice/releases"
Repository = "https://github.com/betaboon/aio-microservice"
"Issue Tracker" = "https://github.com/betaboon/aio-microservice/issues"

[tool.pdm.dev-dependencies]
docs = [
    "furo>=2024.1.29",
    "myst-parser>=2.0.0",
    "sphinx-autoapi>=3.0.0",
    "sphinx-autobuild>=2024.2.4",
    "sphinx-copybutton>=0.5.2",
    "sphinx>=7.2.6",
]
linting = [
    "boto3-stubs[s3]>=1.34.54",
    "gitlint>=0.19.1",
    "mypy>=1.8.0",
    "pre-commit>=3.6.2",
    "ruff>=0.3.0",
]
testing = [
    "httpx>=0.27.0",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest>=8.0.2",
    "testcontainers-on-whales[minio,rabbitmq]>=0.7.0",
]

[tool.pdm.options]
lock = [
    "--group=:all",
]

[tool.pdm.version]
source = "scm"
write_to = "aio_microservice/__version__.py"
write_template = "__version__ = \"{}\"\n"

[tool.semantic_release]
tag_format = "{version}"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "Merge pull request.*",
]

[tool.mypy]
strict = true
python_version = "3.9"
plugins = [
    "pydantic.mypy",
    "strawberry.ext.mypy_plugin",
]

[tool.ruff]
target-version = "py39"
line-length = 100
preview = true

[tool.ruff.lint]
fixable = [
    "ALL",
]
select = [
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "C90",   # mccabe
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle errors
    "ERA",   # eradicate
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FLY",   # flynt
    "FURB",  # refurb
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "NPY",   # numpy
    "PD",    # pandas-vet
    "PERF",  # perflint
    "PIE",   # flake8-pie
    "PLC",   # pylint - convention
    "PLE",   # pylint - error
    "PLW",   # pylint - warning
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "T10",   # flake8-debugger
    "T20",   # flake8-print
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle - warning
    "YTT",   # flake8-2020
]
ignore = [
    "ANN101", # flake8-annotations - missing-type-self - deprecated
    "ANN102", # flake8-annotations - missing-type-cls - deprecated
    "D",      # TODO write documentation
    "D100",   # pydocstyle - undocumented-public-module
    "D104",   # pydocstyle - undocumented-public-package
    "PT004",  # flake8-pytest-style - pytest-missing-fixture-name-underscore - see: https://github.com/astral-sh/ruff/issues/8796
    "PT005",  # flake8-pytest-style - pytest-incorrect-fixture-name-underscore - see: https://github.com/astral-sh/ruff/issues/8796
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "C901", # mccabe - complex-structure
    "D",    # pydocstyle
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false # see: https://github.com/astral-sh/ruff/issues/8796
mark-parentheses = false    # see: https://github.com/astral-sh/ruff/issues/8796

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = "--strict-config --strict-markers --cov"
asyncio_mode = "auto"
xfail_strict = true

[tool.coverage.run]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]
source = ["aio_microservice"]
omit = ["aio_microservice/__version__.py"]

[tool.coverage.report]
fail_under = 100
exclude_also = [
    'if\s+(typing\.)?TYPE_CHECKING:',
]

[tool.pdm.scripts.install-git-hooks]
help = "Install pre-commit hooks"
cmd = "pre-commit install --install-hooks"

[tool.pdm.scripts.lint]
help = "Run pre-commit"
cmd = "pre-commit run --all-files"

[tool.pdm.scripts.test]
help = "Run tests"
cmd = "pytest"

[tool.pdm.scripts.docs-build]
help = "Build docs"
cmd = "sphinx-build docs docs/_build"

[tool.pdm.scripts.docs-serve]
help = "Build and serve docs"
cmd = "sphinx-autobuild --watch aio-microservice docs docs/_build"

[tool.pdm.scripts._ci-lint-code]
cmd = [
    "pre-commit",
    "run",
    "--show-diff-on-failure",
    "--from-ref",
    "${FROM_REF}",
    "--to-ref",
    "${TO_REF}",
]

[tool.pdm.scripts._ci-lint-commits]
cmd = [
    "gitlint",
    "--contrib",
    "contrib-title-conventional-commits",
    "--ignore",
    "body-is-missing",
    "--commits",
    "${FROM_REF}..${TO_REF}",
]
